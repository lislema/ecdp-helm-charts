# A test-only service with internal Cluster IP assigned (not a headless service) to enable the check from within the cluster.
apiVersion: v1
kind: Service
metadata:
  name: {{ include "h2o-helm.fullname" . }}-test-service
  labels:
  {{- include "h2o-helm.labels" . | nindent 4 }}
spec:
  type: ClusterIP
  selector:
  {{- include "h2o-helm.selectorLabels" . | nindent 4 }}
  ports:
    - protocol: TCP
      port: 80
      targetPort: 54321
---
apiVersion: v1
kind: Pod
metadata:
  name: "{{ include "h2o-helm.fullname" . }}-test-connection"
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: everpeace/curl-jq
      command:
        - sh
        - '-c'
        - |
          /bin/bash <<'EOF'
      
          clouded=false
          cloud_size=0
          while [ "$clouded" != true ]
          do
              sleep 1
              response_code=$( curl '{{ include "h2o-helm.fullname" . }}-test-service:{{ .Values.service.port }}/3/Cloud' -w "%{http_code}" -o cloud.info )
              cat cloud.info
              if [ "$response_code" -eq 403 ]; then
                echo "Warning: We reached a non-leader node - this can happen if the readiness probe has not yet marked this node as 'not ready' but H2O is already clustered"
              else
                cloud_size=$( jq '.cloud_size' cloud.info )
              fi
            if [ "$cloud_size" == {{.Values.h2o.nodeCount}} ]
            then
                echo "H2O Cluster size is ${cloud_size}"
              clouded=true
            fi
          done
          forbidden_codes=0
          nodes=$(jq ".nodes[].ip_port" cloud.info | cut -d '"' -f 2)
          echo "Nodes:\n$nodes"
          for node_address in $nodes
          do
              echo "---> Testing node ${node_address} (http://${node_address}/3/Cloud)"
              response_code=$( curl -w "%{http_code}" -o /dev/null "http://${node_address}/3/Cloud" )
              echo "$response_code"
              if [ "$response_code" -eq 403 ]; then
                forbidden_codes=$((forbidden_codes + 1))
              fi
          done

          expected_forbidden_count=$((cloud_size - 1))
          if [ "$clouded" = true ]  && [ "$forbidden_codes" -eq "$expected_forbidden_count" ]
          then
              echo "CLOUDING-RESULT: OK"
              exit 0
          else
              echo "CLOUDING-RESULT: FAILED (clouded=$clouded, forbidden_codes=$forbidden_codes)"
              exit 1
          fi
      
          EOF
  restartPolicy: Never
